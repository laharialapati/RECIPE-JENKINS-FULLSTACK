package com.klef.dev.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import com.klef.dev.entity.Recipe;
import com.klef.dev.service.RecipeService;

@CrossOrigin(origins = "*") // Allow all origins for frontend testing
@RestController
@RequestMapping("/recipeapi")
public class RecipeController {

    @Autowired
    private RecipeService recipeService;

    // Home endpoint
    @GetMapping("/")
    public ResponseEntity<String> home() {
        return ResponseEntity.ok("Recipe Management System - Full Stack Deployment");
    }

    // Add a new recipe
    @PostMapping("/add")
    public ResponseEntity<?> addRecipe(@RequestBody Recipe recipe) {
        try {
            Recipe savedRecipe = recipeService.addRecipe(recipe);  // use instance, not class name
            return new ResponseEntity<>(savedRecipe, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>("Error adding recipe: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Get all recipes
    @GetMapping("/all")
    public ResponseEntity<List<Recipe>> getAllRecipes() {
        List<Recipe> recipes = recipeService.getAllRecipes();  // instance, not class name
        return ResponseEntity.ok(recipes);
    }

    // Get recipe by ID
    @GetMapping("/get/{id}")
    public ResponseEntity<?> getRecipeById(@PathVariable int id) {
        Recipe recipe = recipeService.getRecipeById(id);  // instance
        if (recipe != null) {
            return ResponseEntity.ok(recipe);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                                 .body("Recipe with ID " + id + " not found.");
        }
    }

    // Update recipe
    @PutMapping("/update")
    public ResponseEntity<?> updateRecipe(@RequestBody Recipe recipe) {
        Recipe existing = recipeService.getRecipeById(recipe.getId());
        if (existing != null) {
            Recipe updatedRecipe = recipeService.updateRecipe(recipe);
            return ResponseEntity.ok(updatedRecipe);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                                 .body("Cannot update. Recipe with ID " + recipe.getId() + " not found.");
        }
    }

    // Delete recipe
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteRecipe(@PathVariable int id) {
        Recipe existing = recipeService.getRecipeById(id);
        if (existing != null) {
            recipeService.deleteRecipeById(id);
            return ResponseEntity.ok("Recipe with ID " + id + " deleted successfully.");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                                 .body("Cannot delete. Recipe with ID " + id + " not found.");
        }
    }
}
